# PHP upstream.
upstream php-www {
    server unix:/var/run/php-fpm/php-fpm.sock;
    # This corresponds with fastcgi_keep_conn on; NEVER USE IT.
    #keepalive 300;
}

# Proxy to either Varnish, if available, or the main server block.
upstream orchestrate {
    server 127.0.0.1:6081;
    server 127.0.0.1:8080 backup;
}

# Catch all non-SSL traffic and redirect to SSL.
# If this needs to be used, comment out `listen 80` below.
#server {
#    listen       80;
#    server_name  ~^(?<domainname>.+)$;
#    return       301 https://$domainname$request_uri;
#}

##
# Wildcards: http://nginx.org/en/docs/http/server_names.html

##
# wildcard HTTP
#
# Varnish connects to this, and Nginx as a backup if Varnish is unavailable.
server {
    listen 127.0.0.1:8080;
		listen 80;

    server_name ~^(?<domainname>.+)$;
    root /vagrant/sites/$domainname;
    index index.php index.html;

    error_log /vagrant/logs/nginx.error.log warn;
    access_log /vagrant/logs/$domainname.nginx.access.log main;
    access_log off;

    include security.conf;

    # For Varnish.
    set_real_ip_from 127.0.0.1;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
        access_log off;
        expires 365d;
        add_header Pragma public;
        #add_header Cache-Control "public, max-age=315360000";
    }

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    location ~ \.php$ {
        # use nodelay to 503 immediately after burst reached.
        limit_req zone=noscrape burst=6;

        include fastcgi_params;

        # Set store code per host.
        set $MAGERUNCODE "en";
        if ($host = 'develop.vagrant.dev') {
            set $MAGERUNCODE "en";
        }
        fastcgi_param MAGE_RUN_CODE $MAGERUNCODE;

        # Handle SSL for varnish.
        set $site_ssl "off";
        set $xforwardedproto "http";
        set $xforwardedport "80";
        if ($http_x_forwarded_proto = "https") {
            set $site_ssl "on";
            set $xforwardedproto "https";
            set $xforwardedport "443";
        }
        # Important to have this, otherwise Magento redirect loop.
        fastcgi_param HTTPS $site_ssl;

        fastcgi_pass php-www;

        # See 75f034c which resolved gloves error.
        #proxy_redirect off;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Port 443;
    }

    # Rewrite URLs for Magento

    location /api {
        rewrite ^/api/rest /api.php?type=rest last;
        rewrite ^/api/v2_soap /api.php?type=v2_soap last;
        rewrite ^/api/soap /api.php?type=soap last;
    }

    location / {
        try_files $uri $uri/ /index.php?$args; # make index.php handle requests for /
    }
}

##
# wildcard HTTPS SPDY/HTTP2
#
# This is the server block where all connections come in.
server {
    listen 443 ssl http2;

    server_name ~^(?<domainname>.+)$;
    root /vagrant/sites/$domainname;
    index index.php index.html;

    error_log /vagrant/logs/nginx.error.log warn;
    access_log /vagrant/logs/$domainname.nginx.access.log main;
    access_log off;

    include security.conf;
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

    ssl on;
    ssl_certificate /vagrant/etc/nginx/ssl/_.vagrant.dev.crt;
    ssl_certificate_key /vagrant/etc/nginx/ssl/_.vagrant.dev.key;
    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    #ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    ssl_session_timeout 10m;
    ssl_session_cache shared:SSL:10m;
    # enables server-side protection from BEAST attacks
    # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
    ssl_prefer_server_ciphers on;
    # disable SSLv3 (enabled by default since nginx 0.8.19) since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # ciphers chosen for forward secrecy and compatibility
    # http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
    ssl_ciphers "ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS";

    #ssl_stapling on;
    #ssl_stapling_verify on;
    #ssl_trusted_certificate /etc/nginx/ssl/---.ca.stapling.2048.pem;
    #ssl_trusted_certificate /etc/nginx/ssl/---.ca.geotrust.stapling.2048.pem;
    #resolver 8.8.8.8 8.8.4.4 valid=600s;
    #resolver_timeout 10s;

    ##
    # Pass internall to orchestrate upstream.
    #
    # The upstream will either pass the request to Varnish, which will then in
    # turn communicate with the main server block on 127.0.0.1:8080, or, if
    # Varnish is unavailable, the orchestrate upstream will directly
    # communicate with the main server block.
    #
    location / {
        proxy_pass http://orchestrate;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Ssl-Offloaded "1";
        proxy_set_header HTTPS "on";
        proxy_set_header X-Forwarded-Proto https;
        #proxy_hide_header X-Varnish;
        #proxy_hide_header Via;
        #proxy_redirect off;

        # Trick varnish to normalize browser hash. When disable this does not
        # matter, but in case they're accidentally disabled, have it.
        #proxy_set_header X-Normalized-User-Agent "varnish-normalize-browser-other";
        #proxy_set_header X-User-Agent "varnish-normalize-browser-other";
        #proxy_set_header User-Agent "varnish-normalize-browser-other";
        # Trick varnish for this, too. However, config should disable this.
        #proxy_set_header Accept-Encoding "gzip";Â¬
    }
}
