# PHP upstream.
upstream php-www {
    server unix:/var/run/php-fpm/php-fpm.sock;
    # This corresponds with fastcgi_keep_conn on; NEVER USE IT.
    #keepalive 300;
}

# Varnish upstream, with backup when varnish goes down.
upstream varnish {
    server 127.0.0.1:6081;
    server 127.0.0.1:8080 backup;
}

# Catch all non-SSL traffic and redirect to SSL.
server {
    listen       80;
    server_name  ~^(?<domainname>.+)$;
    return       301 https://$domainname$request_uri;
}

##
# root http
# Access vagrant.dev for seeing phpinfo().
#
# This exists simply to list off all the vhosts and phpinfo. Create the
# appropriate directories within `sites` to host projects.
#
#server {
#    listen       80;
#    server_name  vagrant.dev;
#
#    root   /vagrant/sites;
#    index  index.php;
#
#    autoindex on;
#    sendfile off;
#    disable_symlinks off;
#
#    etag off;
#    server_tokens off;
#
#    gzip on;
#    gzip_comp_level 9;
#    gzip_proxied any;
#    gzip_types text/plain text/xml text/css application/x-javascript text/javascript application/javascript application/xml+rss;
#    gzip_vary on;
#    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
#    gzip_static on;
#
#    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#    location ~ \.php$ {
#        expires off;
#        fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;
#        #fastcgi_pass   127.0.0.1:9000;
#        fastcgi_keep_conn on;
#        fastcgi_index  index.php;
#        include        fastcgi_params;
##        fastcgi_read_timeout 6000;
#        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
#    }
#}


##
# Wildcards: http://nginx.org/en/docs/http/server_names.html
#
# TODO: consolidate duplicated configs below into external include.
#

##
# wildcard HTTP
#
# Varnish connects to this, and Nginx as a backup if Varnish is unavailable.
server {
    listen 127.0.0.1:8080;

    server_name ~^(?<domainname>.+)$;
    root /vagrant/sites/$domainname;
    index index.php;

    error_log /vagrant/logs/nginx.error.log warn;
    access_log /vagrant/logs/$domainname.nginx.access.log main;
    access_log on;

    include security.conf;

    # For Varnish.
    set_real_ip_from 127.0.0.1;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
        access_log off;
        expires 365d;
        add_header Pragma public;
        #add_header Cache-Control "public, max-age=315360000";
    }

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    location ~ \.php$ {
        include fastcgi_params;

        # Handle SSL for varnish.
        set $site_ssl "off";
        if ($http_x_forwarded_proto = "https") {
            set $site_ssl "on";
        }
        fastcgi_param HTTPS $site_ssl;

        fastcgi_pass php-www;

        # See 75f034c which resolved gloves error.
        #proxy_redirect off;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # Rewrite URLs for Magento
    location / {
        try_files $uri $uri/ /index.php?$args; # make index.php handle requests for /
    }
}

##
# wildcard HTTPS SPDY/HTTP2
#
server {
    listen 443 ssl http2;

    server_name ~^(?<domainname>.+)$;
    root /vagrant/sites/$domainname;
    index index.php;

    error_log /vagrant/logs/nginx.error.log warn;
    access_log /vagrant/logs/$domainname.nginx.access.log main;
    access_log on;

    include security.conf;
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

    ssl on;
    ssl_certificate /vagrant/etc/nginx/ssl/_.vagrant.dev.crt;
    ssl_certificate_key /vagrant/etc/nginx/ssl/_.vagrant.dev.key;
    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    #ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    ssl_session_timeout 10m;
    ssl_session_cache shared:SSL:10m;
    # enables server-side protection from BEAST attacks
    # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
    ssl_prefer_server_ciphers on;
    # disable SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # ciphers chosen for forward secrecy and compatibility
    # http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
    #ssl_ciphers "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK:!RC4";
    #ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
    ssl_ciphers "ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS";

    #ssl_stapling on;
    #ssl_stapling_verify on;
    #ssl_trusted_certificate /etc/nginx/ssl/---.ca.stapling.2048.pem;
    #ssl_trusted_certificate /etc/nginx/ssl/---.ca.geotrust.stapling.2048.pem;
    #resolver 8.8.8.8 8.8.4.4 valid=600s;
    #resolver_timeout 10s;

    #
    # Handling Varnish. Comment out everything below this block.
    #

    #location / {
    #    # Pass to Varnish upstream.
    #    proxy_pass http://varnish;
    #    proxy_set_header Host $http_host;
    #    proxy_set_header X-Forwarded-Host $http_host;
    #    proxy_set_header X-Real-IP $remote_addr;
    #    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #    proxy_set_header Ssl-Offloaded "1";
    #    proxy_set_header HTTPS "on";
    #    proxy_set_header X-Forwarded-Proto https;
    #    #proxy_hide_header X-Varnish;
    #    #proxy_hide_header Via;
    #    #proxy_redirect off;
    #
    #    # Trick varnish to normalize browser hash. When disable this does not
    #    # matter, but in case they're accidentally disabled, have it.
    #    #proxy_set_header X-Normalized-User-Agent "varnish-normalize-browser-other";
    #    #proxy_set_header X-User-Agent "varnish-normalize-browser-other";
    #    #proxy_set_header User-Agent "varnish-normalize-browser-other";
    #    # Trick varnish for this, too. However, config should disable this.
    #    #proxy_set_header Accept-Encoding "gzip";Â¬
    #}


    #
    # These next four location blocks are used if Varnish is disabled.
    #

    location ~* \.(?:ico|css|js|gif|jpe?g|png)$ {
       access_log off;
       expires 365d;
       add_header Pragma public;
       #add_header Cache-Control "public, max-age=315360000";
    }

    # pass the PHP scripts to FastCGI server listening on socket or 127.0.0.1:9000
    location ~ \.php$ {

       limit_req zone=one burst=5 nodelay;

       # Disable HTTPS config in include and define it per vhost.
       include fastcgi_params;
       # Important to have this, otherwise Magento redirect loop.
       fastcgi_param HTTPS on;

       fastcgi_pass php-www;

       # See 75f034c which resolved gloves error.
       #proxy_redirect off;
       proxy_set_header Host $http_host;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header X-Forwarded-Proto https;
       proxy_set_header X-Forwarded-Port 443;
    }

    # Rewrite URLs for Magento
    location / {
       try_files $uri $uri/ /index.php?$args; # make index.php handle requests for /
    }
}
